{"ast":null,"code":"var _jsxFileName = \"/Users/matthewgainer/Desktop/Brainstation/Assignments/assignments/matt-gainer-foodiofare/client/src/components/MapContainer/MapContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { GoogleMap, useJsApiLoader } from \"@react-google-maps/api\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: \"400px\",\n  height: \"400px\"\n};\nconst center = {\n  lat: 43.838413,\n  lng: -79.086761\n};\n\nfunction Map() {\n  _s();\n\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: \"google-map-script\",\n    googleMapsApiKey: \"AIzaSyDppxNKV5QddpqA90IuS0kWg9HTLOuJsGw\"\n  });\n  const [map, setMap] = React.useState(null);\n  const onLoad = React.useCallback(function callback(map) {\n    const bounds = new window.google.maps.LatLngBounds();\n    map.fitBounds(bounds);\n    setMap(map);\n  }, []);\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(Map, \"sc/DS85Udqb0HC94DVNruSImuio=\", false, function () {\n  return [useJsApiLoader];\n});\n\n_c = Map;\nexport default _c2 = /*#__PURE__*/React.memo(Map);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/matthewgainer/Desktop/Brainstation/Assignments/assignments/matt-gainer-foodiofare/client/src/components/MapContainer/MapContainer.jsx"],"names":["React","GoogleMap","useJsApiLoader","containerStyle","width","height","center","lat","lng","Map","isLoaded","id","googleMapsApiKey","map","setMap","useState","onLoad","useCallback","callback","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount","memo"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,wBAA1C;;;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,OADc;AAErBC,EAAAA,MAAM,EAAE;AAFa,CAAvB;AAKA,MAAMC,MAAM,GAAG;AACbC,EAAAA,GAAG,EAAE,SADQ;AAEbC,EAAAA,GAAG,EAAE,CAAC;AAFO,CAAf;;AAKA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM;AAAEC,IAAAA;AAAF,MAAeR,cAAc,CAAC;AAClCS,IAAAA,EAAE,EAAE,mBAD8B;AAElCC,IAAAA,gBAAgB,EAAE;AAFgB,GAAD,CAAnC;AAKA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBd,KAAK,CAACe,QAAN,CAAe,IAAf,CAAtB;AAEA,QAAMC,MAAM,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,SAASC,QAAT,CAAkBL,GAAlB,EAAuB;AACtD,UAAMM,MAAM,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,YAAvB,EAAf;AACAV,IAAAA,GAAG,CAACW,SAAJ,CAAcL,MAAd;AACAL,IAAAA,MAAM,CAACD,GAAD,CAAN;AACD,GAJc,EAIZ,EAJY,CAAf;AAMA,QAAMY,SAAS,GAAGzB,KAAK,CAACiB,WAAN,CAAkB,SAASC,QAAT,CAAkBL,GAAlB,EAAuB;AACzDC,IAAAA,MAAM,CAAC,IAAD,CAAN;AACD,GAFiB,EAEf,EAFe,CAAlB;AAIA,SAAOJ,QAAQ,gBACb,QAAC,SAAD;AACE,IAAA,iBAAiB,EAAEP,cADrB;AAEE,IAAA,MAAM,EAAEG,MAFV;AAGE,IAAA,IAAI,EAAE,EAHR;AAIE,IAAA,MAAM,EAAEU,MAJV;AAKE,IAAA,SAAS,EAAES,SALb;AAAA,2BAQE;AARF;AAAA;AAAA;AAAA;AAAA,UADa,gBAYb,qCAZF;AAcD;;GAhCQhB,G;UACcP,c;;;KADdO,G;AAkCT,kCAAeT,KAAK,CAAC0B,IAAN,CAAWjB,GAAX,CAAf","sourcesContent":["import React from \"react\";\nimport { GoogleMap, useJsApiLoader } from \"@react-google-maps/api\";\n\nconst containerStyle = {\n  width: \"400px\",\n  height: \"400px\",\n};\n\nconst center = {\n  lat: 43.838413,\n  lng: -79.086761,\n};\n\nfunction Map() {\n  const { isLoaded } = useJsApiLoader({\n    id: \"google-map-script\",\n    googleMapsApiKey: \"AIzaSyDppxNKV5QddpqA90IuS0kWg9HTLOuJsGw\",\n  });\n\n  const [map, setMap] = React.useState(null);\n\n  const onLoad = React.useCallback(function callback(map) {\n    const bounds = new window.google.maps.LatLngBounds();\n    map.fitBounds(bounds);\n    setMap(map);\n  }, []);\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  return isLoaded ? (\n    <GoogleMap\n      mapContainerStyle={containerStyle}\n      center={center}\n      zoom={10}\n      onLoad={onLoad}\n      onUnmount={onUnmount}\n    >\n      {/* Child components, such as markers, info windows, etc. */}\n      <></>\n    </GoogleMap>\n  ) : (\n    <></>\n  );\n}\n\nexport default React.memo(Map);\n"]},"metadata":{},"sourceType":"module"}
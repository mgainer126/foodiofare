{"ast":null,"code":"/**\n * Module to use google's geocoding & reverse geocoding.\n */\nlet Geocoder;\nexport default Geocoder = {\n  apiKey: null,\n  options: {},\n\n  /**\n   * Initialize the module.\n   * @param {String} apiKey The api key of your application in google.\n   * @param {Object} [options] extra options for your geocoding request.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#geocoding\n   */\n  init(apiKey, options = {}) {\n    this.apiKey = apiKey;\n    this.options = options;\n  },\n\n  /**\n   * @returns {boolean} True if the module has been initiated. False otherwise.\n   */\n  get isInit() {\n    return !!this.apiKey;\n  },\n\n  /**\n   * Do <a href=\"https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding\">(reverse) geocoding</a>, converting geographic coordinates into a human-readable address & vice-versa.\n   * Accepted parameters:\n   * <ul>\n   *     <li>from(Number latitude, Number longitude)</li>\n   *     <li>from(Array [latitude, longitude])</li>\n   *     <li>from(Object {latitude, longitude})</li>\n   *     <li>from(Object {lat, lng})</li>\n   *     <li>from(String address)</li>\n   * </ul>\n   * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#GeocodingResponses\n   */\n  async from(...params) {\n    // check api key\n    if (!Geocoder.isInit) throw {\n      code: Geocoder.Errors.NOT_INITIATED,\n      message: \"Geocoder isn't initialized. Call Geocoder.init function (only once), passing it your app's api key as parameter.\"\n    }; // --- convert parameters ---\n\n    let queryParams; // (latitude, longitude)\n\n    if (!isNaN(params[0]) && !isNaN(params[1])) queryParams = {\n      latlng: `${params[0]},${params[1]}`\n    }; // [latitude, longitude]\n    else if (params[0] instanceof Array) queryParams = {\n      latlng: `${params[0][0]},${params[0][1]}`\n    }; // {latitude, longitude}  or {lat, lng}\n    else if (params[0] instanceof Object) queryParams = {\n      latlng: `${params[0].lat || params[0].latitude},${params[0].lng || params[0].longitude}`\n    }; // address, {bounds: {northeast: {lat, lng}, southwest: {lan, lng}}}\n    else if (typeof params[0] === 'string' && params[1] instanceof Object) queryParams = {\n      address: params[0],\n      bounds: params[1]\n    }; // address\n    else if (typeof params[0] === 'string') queryParams = {\n      address: params[0]\n    }; // --- start geocoding ---\n    // check query params\n\n    if (!queryParams) // no query params, means parameters where invalid\n      throw {\n        code: Geocoder.Errors.INVALID_PARAMETERS,\n        message: \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2)\n      };\n    queryParams = {\n      key: this.apiKey,\n      ...this.options,\n      ...queryParams\n    }; // build url\n\n    const url = `https://maps.google.com/maps/api/geocode/json?${toQueryParams(queryParams)}`;\n    let response, data; // fetch\n\n    try {\n      response = await fetch(url);\n    } catch (error) {\n      throw {\n        code: Geocoder.Errors.FETCHING,\n        message: \"Error while fetching. Check your network.\",\n        origin: error\n      };\n    } // parse\n\n\n    try {\n      data = await response.json();\n    } catch (error) {\n      throw {\n        code: Geocoder.Errors.PARSING,\n        message: \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n        origin: response\n      };\n    } // check response's data\n\n\n    if (data.status !== 'OK') throw {\n      code: Geocoder.Errors.SERVER,\n      message: \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n      origin: data\n    };\n    return data;\n  },\n\n  /**\n   * All possible errors.\n   */\n  Errors: {\n    /**\n     * Module hasn't been initiated. Call {@link Geocoder.init}.\n     */\n    NOT_INITIATED: 0,\n\n    /**\n     * Parameters are invalid.\n     */\n    INVALID_PARAMETERS: 1,\n\n    /**\n     * Error wile fetching to server.\n     * The error.origin property contains the original fetch error.\n     */\n    FETCHING: 2,\n\n    /**\n     * Error while parsing server response.\n     * The error.origin property contains the response.\n     */\n    PARSING: 3,\n\n    /**\n     * Error from the server.\n     * The error.origin property contains the response's body.\n     */\n    SERVER: 4\n  }\n};\n/**\n * Encodes a bounds object into a URL encoded-string.\n */\n\nfunction encodeBounds(bounds) {\n  const southwest = bounds.southwest;\n  const northeast = bounds.northeast;\n  return `${encodeURIComponent(southwest.lat)},${encodeURIComponent(southwest.lng)}|${encodeURIComponent(northeast.lat)},${encodeURIComponent(northeast.lng)}`;\n}\n/**\n * Encodes a component so it can be used safely inside a URL.\n */\n\n\nfunction encodeComponent(key, value) {\n  if (key === 'bounds') {\n    return encodeBounds(value);\n  }\n\n  return encodeURIComponent(value);\n}\n/**\n * Convert an object into query parameters.\n * @param {Object} object Object to convert.\n * @returns {string} Encoded query parameters.\n */\n\n\nfunction toQueryParams(object) {\n  return Object.keys(object).filter(key => !!object[key]).map(key => key + \"=\" + encodeComponent(key, object[key])).join(\"&\");\n}","map":{"version":3,"sources":["/Users/matthewgainer/Desktop/Brainstation/Assignments/assignments/matt-gainer-foodiofare/client/node_modules/react-native-geocoding/Geocoder.js"],"names":["Geocoder","apiKey","options","init","isInit","from","params","code","Errors","NOT_INITIATED","message","queryParams","isNaN","latlng","Array","Object","lat","latitude","lng","longitude","address","bounds","INVALID_PARAMETERS","JSON","stringify","key","url","toQueryParams","response","data","fetch","error","FETCHING","origin","json","PARSING","status","SERVER","encodeBounds","southwest","northeast","encodeURIComponent","encodeComponent","value","object","keys","filter","map","join"],"mappings":"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","sourcesContent":["/**\n * Module to use google's geocoding & reverse geocoding.\n */\nlet Geocoder;\nexport default Geocoder = {\n\tapiKey : null,\n\toptions : {},\n\t\n\t/**\n\t * Initialize the module.\n\t * @param {String} apiKey The api key of your application in google.\n\t * @param {Object} [options] extra options for your geocoding request.\n\t * @see https://developers.google.com/maps/documentation/geocoding/intro#geocoding\n\t */\n\tinit(apiKey, options = {}) {\n\t\tthis.apiKey = apiKey;\n\t\tthis.options = options;\n\t},\n\n\t/**\n\t * @returns {boolean} True if the module has been initiated. False otherwise.\n\t */\n\tget isInit() {\n\t\treturn !!this.apiKey;\n\t},\n\n\t/**\n\t * Do <a href=\"https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding\">(reverse) geocoding</a>, converting geographic coordinates into a human-readable address & vice-versa.\n\t * Accepted parameters:\n\t * <ul>\n\t *     <li>from(Number latitude, Number longitude)</li>\n\t *     <li>from(Array [latitude, longitude])</li>\n\t *     <li>from(Object {latitude, longitude})</li>\n\t *     <li>from(Object {lat, lng})</li>\n\t *     <li>from(String address)</li>\n\t * </ul>\n\t * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\n\t * @see https://developers.google.com/maps/documentation/geocoding/intro#GeocodingResponses\n\t */\n\tasync from(...params) {\n\t\t// check api key\n\t\tif (!Geocoder.isInit)\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.NOT_INITIATED,\n\t\t\t\tmessage : \"Geocoder isn't initialized. Call Geocoder.init function (only once), passing it your app's api key as parameter.\",\n\t\t\t};\n\n\t\t// --- convert parameters ---\n\t\tlet queryParams;\n\n\t\t// (latitude, longitude)\n\t\tif (!isNaN(params[0]) && !isNaN(params[1]))\n\t\t\tqueryParams = {latlng : `${params[0]},${params[1]}`};\n\n\t\t// [latitude, longitude]\n\t\telse if (params[0] instanceof Array)\n\t\t\tqueryParams = {latlng : `${params[0][0]},${params[0][1]}`};\n\n\t\t// {latitude, longitude}  or {lat, lng}\n\t\telse if (params[0] instanceof Object)\n\t\t\tqueryParams = {latlng : `${params[0].lat || params[0].latitude},${params[0].lng || params[0].longitude}`};\n\n\t\t// address, {bounds: {northeast: {lat, lng}, southwest: {lan, lng}}}\n\t\telse if (typeof params[0] === 'string' && params[1] instanceof Object)\n\t\t\tqueryParams = {address : params[0], bounds : params[1]};\n\n\t\t// address\n\t\telse if (typeof params[0] === 'string')\n\t\t\tqueryParams = {address : params[0]};\n\n\t\t// --- start geocoding ---\n\n\t\t// check query params\n\t\tif (!queryParams)\n\t\t// no query params, means parameters where invalid\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.INVALID_PARAMETERS,\n\t\t\t\tmessage : \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2),\n\t\t\t};\n\n\t\tqueryParams = { key: this.apiKey, ...this.options, ...queryParams }\n\t\t// build url\n\t\tconst url = `https://maps.google.com/maps/api/geocode/json?${toQueryParams(queryParams)}`;\n\n\t\tlet response, data;\n\n\t\t// fetch\n\t\ttry {\n\t\t\tresponse = await fetch(url);\n\t\t} catch(error) {\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.FETCHING,\n\t\t\t\tmessage : \"Error while fetching. Check your network.\",\n\t\t\t\torigin : error,\n\t\t\t};\n\t\t}\n\n\t\t// parse\n\t\ttry {\n\t\t\tdata = await response.json();\n\t\t} catch(error) {\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.PARSING,\n\t\t\t\tmessage : \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n\t\t\t\torigin : response,\n\t\t\t};\n\t\t}\n\n\t\t// check response's data\n\t\tif (data.status !== 'OK')\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.SERVER,\n\t\t\t\tmessage : \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n\t\t\t\torigin : data,\n\t\t\t};\n\n\t\treturn data;\n\t},\n\n\t/**\n\t * All possible errors.\n\t */\n\tErrors : {\n\t\t/**\n\t\t * Module hasn't been initiated. Call {@link Geocoder.init}.\n\t\t */\n\t\tNOT_INITIATED : 0,\n\n\t\t/**\n\t\t * Parameters are invalid.\n\t\t */\n\t\tINVALID_PARAMETERS : 1,\n\n\t\t/**\n\t\t * Error wile fetching to server.\n\t\t * The error.origin property contains the original fetch error.\n\t\t */\n\t\tFETCHING : 2,\n\n\t\t/**\n\t\t * Error while parsing server response.\n\t\t * The error.origin property contains the response.\n\t\t */\n\t\tPARSING : 3,\n\n\t\t/**\n\t\t * Error from the server.\n\t\t * The error.origin property contains the response's body.\n\t\t */\n\t\tSERVER : 4,\n\t},\n}\n\n/**\n * Encodes a bounds object into a URL encoded-string.\n */\nfunction encodeBounds(bounds) {\n\tconst southwest = bounds.southwest;\n\tconst northeast = bounds.northeast;\n\treturn `${encodeURIComponent(southwest.lat)},${encodeURIComponent(southwest.lng)}|${encodeURIComponent(northeast.lat)},${encodeURIComponent(northeast.lng)}`;\n}\n\n/**\n * Encodes a component so it can be used safely inside a URL.\n */\nfunction encodeComponent(key, value) {\n\tif (key === 'bounds') {\n\t\treturn encodeBounds(value);\n\t}\n\treturn encodeURIComponent(value);\n}\n\n/**\n * Convert an object into query parameters.\n * @param {Object} object Object to convert.\n * @returns {string} Encoded query parameters.\n */\nfunction toQueryParams(object) {\n\treturn Object.keys(object)\n\t\t.filter(key => !!object[key])\n\t\t.map(key => key + \"=\" + encodeComponent(key, object[key]))\n\t\t.join(\"&\")\n}\n"]},"metadata":{},"sourceType":"module"}